diff --git a/lib/redmine/wiki_formatting/markdown/formatter.rb b/lib/redmine/wiki_formatting/markdown/formatter.rb
index 418ab8b14..44d65248f 100644
--- a/lib/redmine/wiki_formatting/markdown/formatter.rb
+++ b/lib/redmine/wiki_formatting/markdown/formatter.rb
@@ -38,12 +38,14 @@ module Redmine
 
         def block_code(code, language)
           if language.present? && Redmine::SyntaxHighlighting.language_supported?(language)
-            "<pre><code class=\"#{CGI.escapeHTML language} syntaxhl\">" +
-              Redmine::SyntaxHighlighting.highlight_by_language(code, language) +
-              "</code></pre>"
+            html = Redmine::SyntaxHighlighting.highlight_by_language(code, language)
+            classattr = " class=\"#{CGI.escapeHTML language} syntaxhl\""
           else
-            "<pre>" + CGI.escapeHTML(code) + "</pre>"
+            html = CGI.escapeHTML(code)
           end
+          # original language for extension development
+          langattr = " data-language=\"#{CGI.escapeHTML language}\"" if language.present?
+          "<pre><code#{classattr}#{langattr}>#{html}</code></pre>"
         end
 
         def image(link, title, alt_text)
diff --git a/lib/redmine/wiki_formatting/textile/formatter.rb b/lib/redmine/wiki_formatting/textile/formatter.rb
index 8f0200b33..d42530651 100644
--- a/lib/redmine/wiki_formatting/textile/formatter.rb
+++ b/lib/redmine/wiki_formatting/textile/formatter.rb
@@ -128,12 +128,14 @@ module Redmine
               if content.match(/<code\s+class=(?:"([^"]+)"|'([^']+)')>\s?(.*)/m)
                 language = $1 || $2
                 text = $3
+                # original language for extension development
+                langattr = " data-language=\"#{CGI.escapeHTML language}\"" if language.present?
                 if Redmine::SyntaxHighlighting.language_supported?(language)
                   text.gsub!(/x%x%/, '&')
-                  content = "<code class=\"#{language} syntaxhl\">" +
+                  content = "<code class=\"#{CGI.escapeHTML language} syntaxhl\"#{langattr}>" +
                     Redmine::SyntaxHighlighting.highlight_by_language(text, language)
                 else
-                  content = "<code>#{ERB::Util.h(text)}"
+                  content = "<code#{langattr}>#{ERB::Util.h(text)}"
                 end
               end
               content
diff --git a/test/unit/lib/redmine/wiki_formatting/markdown_formatter_test.rb b/test/unit/lib/redmine/wiki_formatting/markdown_formatter_test.rb
index e3bb6ee79..445c7cbbc 100644
--- a/test/unit/lib/redmine/wiki_formatting/markdown_formatter_test.rb
+++ b/test/unit/lib/redmine/wiki_formatting/markdown_formatter_test.rb
@@ -70,6 +70,7 @@ class Redmine::WikiFormatting::MarkdownFormatterTest < ActionView::TestCase
     STR
     assert_select_in @formatter.new(text).to_html, 'pre code.ruby.syntaxhl' do
       assert_select 'span.k', :text => 'def'
+      assert_select "[data-language='ruby']"
     end
   end
 
@@ -79,7 +80,16 @@ class Redmine::WikiFormatting::MarkdownFormatterTest < ActionView::TestCase
       test
       ~~~
     STR
-    assert_equal "<pre>test\n</pre>", @formatter.new(text).to_html
+    assert_equal "<pre><code data-language=\"foo\">test\n</code></pre>", @formatter.new(text).to_html
+  end
+
+  def test_should_preserve_code_block_language_in_data_language
+    text = <<~STR
+      ~~~c-k&r
+      test
+      ~~~
+    STR
+    assert_equal "<pre><code data-language=\"c-k&amp;r\">test\n</code></pre>", @formatter.new(text).to_html
   end
 
   def test_external_links_should_have_external_css_class
diff --git a/test/unit/lib/redmine/wiki_formatting/textile_formatter_test.rb b/test/unit/lib/redmine/wiki_formatting/textile_formatter_test.rb
index 5ee4defe1..3a8e0ad0f 100644
--- a/test/unit/lib/redmine/wiki_formatting/textile_formatter_test.rb
+++ b/test/unit/lib/redmine/wiki_formatting/textile_formatter_test.rb
@@ -596,12 +596,16 @@ class Redmine::WikiFormatting::TextileFormatterTest < ActionView::TestCase
   end
 
   def test_should_not_allow_arbitrary_class_attribute_on_offtags
-    %w(code pre kbd).each do |tag|
-      assert_html_output({"<#{tag} class=\"foo\">test</#{tag}>" => "<#{tag}>test</#{tag}>"}, false)
-      assert_html_output({"<#{tag} class='foo'>test</#{tag}>" => "<#{tag}>test</#{tag}>"}, false)
-      assert_html_output({"<#{tag} class=\"ruby foo\">test</#{tag}>" => "<#{tag}>test</#{tag}>"}, false)
-      assert_html_output({"<#{tag} class='ruby foo'>test</#{tag}>" => "<#{tag}>test</#{tag}>"}, false)
-      assert_html_output({"<#{tag} class=\"ruby \"foo\" bar\">test</#{tag}>" => "<#{tag}>test</#{tag}>"}, false)
+    {
+      "class=\"foo\"" => "data-language=\"foo\"",
+      "class='foo'" => "data-language=\"foo\"",
+      "class=\"ruby foo\"" => "data-language=\"ruby foo\"",
+      "class='ruby foo'" => "data-language=\"ruby foo\"",
+      "class=\"ruby \"foo\" bar\"" => "data-language=\"ruby \"",
+    }.each do |classattr, codeattr|
+      assert_html_output({"<code #{classattr}>test</code>" => "<code #{codeattr}>test</code>"}, false)
+      assert_html_output({"<pre #{classattr}>test</pre>" => "<pre>test</pre>"}, false)
+      assert_html_output({"<kbd #{classattr}>test</kbd>" => "<kbd>test</kbd>"}, false)
     end
 
     assert_html_output({"<notextile class=\"foo\">test</notextile>" => "test"}, false)
@@ -615,13 +619,25 @@ class Redmine::WikiFormatting::TextileFormatterTest < ActionView::TestCase
     # language name is double-quoted
     assert_html_output(
       {"<code class=\"ruby\">test</code>" =>
-         "<code class=\"ruby syntaxhl\"><span class=\"nb\">test</span></code>"},
+         "<code class=\"ruby syntaxhl\" data-language=\"ruby\"><span class=\"nb\">test</span></code>"},
       false
     )
     # language name is single-quoted
     assert_html_output(
       {"<code class='ruby'>test</code>" =>
-         "<code class=\"ruby syntaxhl\"><span class=\"nb\">test</span></code>"},
+         "<code class=\"ruby syntaxhl\" data-language=\"ruby\"><span class=\"nb\">test</span></code>"},
+      false
+    )
+  end
+
+  def test_should_preserve_code_language_class_attribute_in_data_language
+    assert_html_output(
+      {
+        "<code class=\"foolang\">unsupported language</code>" =>
+          "<code data-language=\"foolang\">unsupported language</code>",
+        "<code class=\"c-k&r\">special-char language</code>" =>
+          "<code data-language=\"c-k&#38;r\">special-char language</code>",
+      },
       false
     )
   end
