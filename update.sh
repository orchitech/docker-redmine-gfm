#!/usr/bin/env bash

set -eu -o pipefail

cd "$(dirname "$0")"
source "./common.sh"


VERSION_PATTERN='(4|4\.[0-9.]*)'
VARIANT_PATTERN='(alpine|passenger)'
MD_BULLET='-'

TAG_REGEXP="^(${VERSION_PATTERN}(-${VARIANT_PATTERN})?|${VARIANT_PATTERN}|latest)\$"

# Image digests from https://hub.docker.com/v2/repositories/library/redmine/tags are
# unfortunately unusable. See https://github.com/docker/hub-feedback/issues/1925,
# `docker manifest inspect --verbose redmine:tag` and the command docs for more info
get_image_digest()
{
  local tag=$1
  curl -fsS "$DOCKER_HUB_REGISTRY_URL/v2/library/redmine/manifests/$tag" \
      -H "Authorization:Bearer $(get_docker_hub_token library/redmine)" \
      -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" | \
      jq -r '.manifests[] | select(.platform.os == "linux" and .platform.architecture == "amd64") | .digest'
}

get_tags()
{
  local image=$1
  local versions=''
  local next_page="https://hub.docker.com/v2/repositories/$image/tags?ordering=last_updated"
  local page version

  while [ "$next_page" != 'null' ]; do
    page=$(curl -fsS "$next_page")
    version=$(jq -r '.results[] | . as $result | .images[] | select(.os == "linux" and .architecture == "amd64") | $result.name' <<< "$page")
    versions+=$version$'\n'
    next_page=$(jq -r '.next' <<< "$page")
  done

  sort -u <<< "$versions"
}

get_supported_tags()
{
  get_tags library/redmine | grep -E "$TAG_REGEXP"
}

sort_tags()
{
  local tags=$(sort -Vr <<< "$1")
  grep -v '[0-9]' <<< "$tags" ||:                   # non-numeric tags
  grep -E '^[0-9]+[^.]*$' <<< "$tags" ||:           # numeric tags prefixed with only one number
  grep -E '^[0-9]+\.[0-9]+[^.]*$' <<< "$tags" ||:   # numeric tags prefixed with two numbers
  grep -E '^[0-9]+\.[0-9]+\.[0-9]+' <<< "$tags" ||: # semver tags
}

print_tags()
{
  local tags=$1
  sort_tags "$tags" | sed -E 's/[^ ]+/`&`/g' | tr '\n' ' ' | sed 's/ $//' | sed 's/ /, /g'
}

render_tags_yml()
{
  local tags=$1
  local digest
  printf 'env:\n'
  for tag in $tags; do
    digest=$(get_image_digest "$tag")
    printf '  - TAG=%s FROM_IMAGE_DIGEST=%s\n' "$tag" "$digest"
  done
}

render_readme_md()
{
  local tags=$1
  local -a grouped_tags=(
    "$(grep -Ev '(alpine|passenger)$' <<< "$tags")" # debian
    "$(grep alpine <<< "$tags")"                    # alpine
    "$(grep passenger <<< "$tags")"                 # passenger
  )
  local gtags
  cat docs/autogenerated-warning.md
  printf '# Supported tags\n\n'
  for gtags in "${grouped_tags[@]}"; do
    printf '%s %s\n' "$MD_BULLET" "$(print_tags "$gtags")"
  done
  printf '\n'
  cat docs/content.md
}

if [ -z "${DOCKER_HUB_USERNAME-}" ]; then
  fail "DOCKER_HUB_USERNAME environment variable must be set."
fi

if [ -z "${DOCKER_HUB_PASSWORD-}" ]; then
  fail "DOCKER_HUB_PASSWORD environment variable must be set."
fi

tags=$(get_supported_tags)
new_tags_yml=$(render_tags_yml "$tags")
new_readme_md=$(render_readme_md "$tags")

# contents successfuly prepared, overwrite files
printf '%s\n' "$new_tags_yml" > tags.yml
printf '%s\n' "$new_readme_md" > README.md
